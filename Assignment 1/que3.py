# -*- coding: utf-8 -*-
"""Que3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nVYvQQAJAV8EmB3HHzuyI8kFBrLQXURp
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
data=pd.read_csv('Que3.csv')
data.head()

x_axis=data.iloc[:,1:2].values
y_axis=data.iloc[:,2].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x_axis,y_axis,test_size=0.2,random_state=0)

from sklearn.linear_model import LinearRegression

Lreg=LinearRegression()
Lreg.fit(x_train,y_train)

plt.scatter(x_train,y_train,color = 'Red')
plt.plot(x_train,Lreg.predict(x_train),color='Blue')
plt.title('Linear Regression')
plt.xlabel('Feauture 1')
plt.ylabel('output')
plt.show()

from sklearn.preprocessing import PolynomialFeatures
polynom= PolynomialFeatures(degree=2)
x_plyn= polynom.fit_transform(x_train)

PolyReg= LinearRegression()
PolyReg.fit(x_plyn, y_train)

plt.scatter(x_train,y_train, color='Red')
plt.plot(x_train, PolyReg.predict(polynom.fit_transform(x_train)), color='blue')
plt.title('Polynomial Regression with degree 2')
plt.xlabel('input feature')
plt.ylabel('output')
plt.show()

polynom= PolynomialFeatures(degree=3)
x_polynom= polynom.fit_transform(x_train)

PolyReg= LinearRegression()
PolyReg.fit(x_polynom, y_train)

plt.scatter(x_train,y_train, color='Red')
plt.plot(x_train, PolyReg.predict(polynom.fit_transform(x_train)), color='blue')
plt.title('Polynomial Regression with degree 3')
plt.xlabel('input feature')
plt.ylabel('output')
plt.show()

y_predict_smpllnrrgr = Lreg.predict(x_test)
from sklearn import metrics
r_square=metrics.r2_score(y_test, y_predict_smpllnrrgr)
print('R-sqr error associated with simple linear Regression:',r_square)

y_predict_smpllnrrgr = PolyReg.predict(polynom.fit_transform(x_test))
from sklearn import metrics
r_square=metrics.r2_score(y_test, y_predict_smpllnrrgr)
print('R-sqr error associated with Polynomial Regression:',r_square)

Lreg.predict([[100.57818]])

PolyReg.predict(polynom.fit_transform([[100.57818]]))

